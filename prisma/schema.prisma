// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime?
  name          String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  exchangeAccounts ExchangeAccount[]
  positions     Position[]
  watches       Watch[]
  alerts        Alert[]
  recommendations Recommendation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ExchangeAccount {
  id           String   @id @default(cuid())
  userId       String
  name         String
  apiKeyMasked String
  readOnly     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Asset {
  id       String   @id @default(cuid())
  symbol   String   @unique
  name     String
  metadata String?  // JSON string for additional asset data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  positions Position[]
  watches   Watch[]
  alerts    Alert[]
  signals   Signal[]
}

model Position {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  qty       Float
  avgCost   Float
  source    String?  // 'manual' or 'api'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Watch {
  id        String   @id @default(cuid())
  userId    String
  assetId   String
  params    String?  // JSON string for watch parameters
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Alert {
  id          String      @id @default(cuid())
  userId      String
  assetId     String
  rule        String      // JSON string for alert rule
  threshold   Float
  channel     AlertChannel @default(IN_APP)
  isActive    Boolean     @default(true)
  lastFiredAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset Asset @relation(fields: [assetId], references: [id], onDelete: Cascade)
}

model Signal {
  id        String   @id @default(cuid())
  assetId   String
  timeframe String   // '1m', '5m', '1h', '4h', '1d'
  payload   String   // JSON string for signal data (indicators, features)
  score     Float    // 0-1 confidence score
  label     String   // 'bullish', 'bearish', 'neutral'
  createdAt DateTime @default(now())

  // Relations
  asset           Asset            @relation(fields: [assetId], references: [id], onDelete: Cascade)
  audits          SignalAudit[]
  recommendations Recommendation[]
}

model SignalAudit {
  id         String   @id @default(cuid())
  signalId   String
  explanation String  // Detailed explanation of why signal was triggered
  inputsHash String   // Hash of input data for reproducibility
  createdAt  DateTime @default(now())

  // Relations
  signal Signal @relation(fields: [signalId], references: [id], onDelete: Cascade)
}

model Recommendation {
  id          String   @id @default(cuid())
  userId      String
  signalId    String
  action      String   // 'buy', 'sell', 'hold', 'take_profit', 'accumulate'
  confidence  Float    // 0-1 confidence score
  rationale   String   // JSON string for detailed rationale
  createdAt   DateTime @default(now())

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  signal Signal @relation(fields: [signalId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum AlertChannel {
  IN_APP
  EMAIL
  TELEGRAM
  WEBHOOK
}